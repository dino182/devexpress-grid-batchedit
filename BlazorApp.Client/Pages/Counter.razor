@page "/counter"

<PageTitle>Working</PageTitle>

<DxGrid @ref="@_grid"
        PageSize="12"
        Data="@_data"
        KeyFieldName="@(nameof(Item.Id))"
        ValidationEnabled="false"
        SizeMode="@SizeMode.Medium"
        EditMode="@GridEditMode.EditCell"
        EditModelSaving="@Grid_EditModelSaving"
        CustomizeElement="@Grid_CustomizeElement"
        ColumnResizeMode="@GridColumnResizeMode.NextColumn"
        TextWrapEnabled="@false"
        HighlightRowOnHover="@true">
    <ToolbarTemplate>
        <DxToolbar ItemRenderStyleMode="@ToolbarRenderStyleMode.Plain">
            <DxToolbarItem Text="Save" Click="@Save_Click" IconCssClass="grid-toolbar-save" Enabled="@BatchItemsEnabled" />
            <DxToolbarItem Text="Cancel" Click="@Cancel_Click" IconCssClass="grid-toolbar-cancel" Enabled="@BatchItemsEnabled" />
        </DxToolbar>
    </ToolbarTemplate>
    <Columns>
        <DxGridDataColumn FieldName="@(nameof(Item.Text1))" />
        <DxGridDataColumn FieldName="@(nameof(Item.Text2))" />
        <DxGridDataColumn FieldName="@(nameof(Item.Value1))" />
        <DxGridDataColumn FieldName="@(nameof(Item.Value2))" />
        <DxGridDataColumn FieldName="@(nameof(Item.Value3))" />
    </Columns>
</DxGrid>

@code
{
    private IGrid _grid;
    private List<Item> _data;

    private readonly Dictionary<Item, DataChange> _unsavedChanges = new();

    private bool BatchItemsEnabled => _unsavedChanges.Count > 0 || _grid.IsEditing();

    protected override void OnInitialized() => UpdateData();
    void Cancel_Click() => ClearUnsavedChanges();
    void Save_Click() => ClearUnsavedChanges();
    void Grid_CustomizeElement(GridCustomizeElementEventArgs ea)
    {
        if (ea.ElementType == GridElementType.DataCell)
        {
            var employee = (Item)_grid.GetDataItem(ea.VisibleIndex);
            var column = (IGridDataColumn)ea.Column;
            if (_unsavedChanges.TryGetValue(employee, out var changes))
            {
                if (changes.ChangedFields.Contains(column.FieldName))
                    ea.CssClass = "grid-modified-cell";
            }
        }
    }
    void Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var editableEmployee = (Item)e.EditModel;
        var employee = (Item)e.DataItem;
        var changedFields = DataUtils.ApplyModifiedFields(editableEmployee, employee);
        if (changedFields.Count > 0)
        {
            if (_unsavedChanges.TryGetValue(employee, out var changes))
                changes.ChangedFields.UnionWith(changedFields);
            else
                _unsavedChanges.Add(employee, new(changedFields));
        }
    }
    void ClearUnsavedChanges()
    {
        _unsavedChanges.Clear();
        UpdateData();
    }
    void UpdateData()
    {
        _data = new List<Item>
        {
            new Item {Id = 1, Text1 = "Item 1 Text1", Text2 = "Item 1 Text2", Value1 = 1, Value2 = 4, Value3 = 7},
            new Item {Id = 2, Text1 = "Item 2 Text1", Text2 = "Item 2 Text2", Value1 = 2, Value2 = 5, Value3 = 8},
            new Item {Id = 3, Text1 = "Item 3 Text1", Text2 = "Item 3 Text2", Value1 = 3, Value2 = 6, Value3 = 9},
        };
    }
    record DataChange(HashSet<string> ChangedFields);
}
